<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.jxtc.bookapp.mapper.app.BookReviewMapper">
    <resultMap id="BaseResultMap" type="com.jxtc.bookapp.entity.BookReview">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="user_id" property="userId" jdbcType="VARCHAR"/>
        <result column="book_id" property="bookId" jdbcType="INTEGER"/>
        <result column="grade" property="grade" jdbcType="INTEGER"/>
        <result column="praise" property="praise" jdbcType="INTEGER"/>
        <result column="content" property="content" jdbcType="VARCHAR"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        id
        ,
        user_id,
        book_id,
        grade,
        praise,
        content,
        create_time
    </sql>
    <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.jxtc.bookapp.entity.BookReviewExample">
        select
        <if test="distinct">
            distinct
        </if>
        'true' as QUERYID,
        <include refid="Base_Column_List"/>
        from book_review
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        from book_review
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete
        from book_review
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <delete id="deleteByExample" parameterType="com.jxtc.bookapp.entity.BookReviewExample">
        delete from book_review
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.jxtc.bookapp.entity.BookReview">
        insert into book_review (id, user_id, book_id,
                                 grade, praise, content,
                                 create_time)
        values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=VARCHAR}, #{bookId,jdbcType=INTEGER},
                #{grade,jdbcType=INTEGER}, #{praise,jdbcType=INTEGER}, #{content,jdbcType=VARCHAR},
                #{createTime,jdbcType=TIMESTAMP})
    </insert>
    <insert id="insertSelective" parameterType="com.jxtc.bookapp.entity.BookReview">
        insert into book_review
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="userId != null">
                user_id,
            </if>
            <if test="bookId != null">
                book_id,
            </if>
            <if test="grade != null">
                grade,
            </if>
            <if test="praise != null">
                praise,
            </if>
            <if test="content != null">
                content,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="userId != null">
                #{userId,jdbcType=VARCHAR},
            </if>
            <if test="bookId != null">
                #{bookId,jdbcType=INTEGER},
            </if>
            <if test="grade != null">
                #{grade,jdbcType=INTEGER},
            </if>
            <if test="praise != null">
                #{praise,jdbcType=INTEGER},
            </if>
            <if test="content != null">
                #{content,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.jxtc.bookapp.entity.BookReviewExample"
            resultType="java.lang.Integer">
        select count(*) from book_review
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update book_review
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=INTEGER},
            </if>
            <if test="record.userId != null">
                user_id = #{record.userId,jdbcType=VARCHAR},
            </if>
            <if test="record.bookId != null">
                book_id = #{record.bookId,jdbcType=INTEGER},
            </if>
            <if test="record.grade != null">
                grade = #{record.grade,jdbcType=INTEGER},
            </if>
            <if test="record.praise != null">
                praise = #{record.praise,jdbcType=INTEGER},
            </if>
            <if test="record.content != null">
                content = #{record.content,jdbcType=VARCHAR},
            </if>
            <if test="record.createTime != null">
                create_time = #{record.createTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update book_review
        set id = #{record.id,jdbcType=INTEGER},
        user_id = #{record.userId,jdbcType=VARCHAR},
        book_id = #{record.bookId,jdbcType=INTEGER},
        grade = #{record.grade,jdbcType=INTEGER},
        praise = #{record.praise,jdbcType=INTEGER},
        content = #{record.content,jdbcType=VARCHAR},
        create_time = #{record.createTime,jdbcType=TIMESTAMP}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.jxtc.bookapp.entity.BookReview">
        update book_review
        <set>
            <if test="userId != null">
                user_id = #{userId,jdbcType=VARCHAR},
            </if>
            <if test="bookId != null">
                book_id = #{bookId,jdbcType=INTEGER},
            </if>
            <if test="grade != null">
                grade = #{grade,jdbcType=INTEGER},
            </if>
            <if test="praise != null">
                praise = #{praise,jdbcType=INTEGER},
            </if>
            <if test="content != null">
                content = #{content,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.jxtc.bookapp.entity.BookReview">
        update book_review
        set user_id     = #{userId,jdbcType=VARCHAR},
            book_id     = #{bookId,jdbcType=INTEGER},
            grade       = #{grade,jdbcType=INTEGER},
            praise      = #{praise,jdbcType=INTEGER},
            content     = #{content,jdbcType=VARCHAR},
            create_time = #{createTime,jdbcType=TIMESTAMP}
        where id = #{id,jdbcType=INTEGER}
    </update>

    <select id="selectPageBookReviews" resultType="com.jxtc.bookapp.entity.BookReview">
        select r.id          as id,
               r.book_id     as bookId,
               r.user_id     as userId,
               r.grade       as grade,
               r.praise      as praise,
               r.content     as content,
               r.create_time as createTime,
               u.headimgurl  as headImg,
               u.nickname    as nickname,
               b.book_name   as bookname
        from user_info u,
             book_review r,
             bc_source.book_info b
        where r.book_id = b.book_id
          and r.user_id = u.user_id
          and r.book_id = #{bookId,jdbcType=INTEGER}
        order by r.create_time desc
                 limit #{offset,jdbcType=INTEGER},#{size,jdbcType=INTEGER}
    </select>

    <select id="selectPageUserBookReviews" resultType="com.jxtc.bookapp.entity.BookReview">
        select r.id          as id,
               r.book_id     as bookId,
               r.user_id     as userId,
               r.grade       as grade,
               r.praise      as praise,
               r.content     as content,
               r.create_time as createTime,
               u.headimgurl  as headImg,
               u.nickname    as nickname,
               b.book_name   as bookname
        from user_info u,
             book_review r,
             bc_source.book_info b
        where r.book_id = b.book_id
          and r.user_id = u.user_id
          and r.user_id = #{userId,jdbcType=VARCHAR}
        order by r.create_time desc
                 limit #{offset,jdbcType=INTEGER},#{size,jdbcType=INTEGER}
    </select>

    <select id="praise">
        update book_review
        set praise=#{praise,jdbcType=INTEGER}
        where id = #{id,jdbcType=INTEGER}
    </select>

    <select id="selectHaveReviewBookList" resultType="com.jxtc.bookapp.entity.BookInfo">
        select b.book_id as bookId,
        b.book_name as bookName,
        b.author,
        b.pic_url as picUrl,
        b.book_type as bookType,
        b.category as category,
        b.words
        from bc_source.book_info b,
        bookapp.book_review r
        where b.book_id=r.book_id
        <if test="bookName != null and bookName != ''">
            and b.book_name like concat('%',#{bookName,jdbcType=VARCHAR} ,'%')
        </if>
        group by r.book_id
        order by r.book_id desc
        limit #{offset,jdbcType=INTEGER},#{size,jdbcType=INTEGER}
    </select>

    <select id="countHaveReviewBook" resultType="int">
        select ifnull(count(distinct (r.book_id)),0)
        from bc_source.book_info b,
        bookapp.book_review r
        <where>
            b.book_id=r.book_id
            <if test="bookName != null and bookName != ''">
                and b.book_name like concat('%',#{bookName,jdbcType=VARCHAR} ,'%')
            </if>
        </where>
    </select>
    <select id="countByBookId" resultType="int">
        select ifnull(count(*),0)
        from book_review
        where book_id = #{bookId,jdbcType=INTEGER}
    </select>
</mapper>