<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.jxtc.bookapp.mapper.app.ConsumeMapper">
    <resultMap id="BaseResultMap" type="com.jxtc.bookapp.entity.Consume">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="user_id" property="userId" jdbcType="VARCHAR"/>
        <result column="book_id" property="bookId" jdbcType="INTEGER"/>
        <result column="chapter_id" property="chapterId" jdbcType="INTEGER"/>
        <result column="amount" property="amount" jdbcType="INTEGER"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        id
        ,
        user_id,
        book_id,
        chapter_id,
        amount,
        create_time
    </sql>
    <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.jxtc.bookapp.entity.ConsumeExample">
        select
        <if test="distinct">
            distinct
        </if>
        'true' as QUERYID,
        <include refid="Base_Column_List"/>
        from consume_#{tableIndex,jdbcType=INTEGER}
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        from consume_#{tableIndex,jdbcType=INTEGER}
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete
        from consume_#{tableIndex,jdbcType=INTEGER}
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <delete id="deleteByExample" parameterType="com.jxtc.bookapp.entity.ConsumeExample">
        delete from consume_#{tableIndex,jdbcType=INTEGER}
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.jxtc.bookapp.entity.Consume">
        insert into consume_#{tableIndex,jdbcType=INTEGER} (id, user_id, book_id,
        chapter_id, amount, create_time)
        values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=VARCHAR}, #{bookId,jdbcType=INTEGER},
        #{chapterId,jdbcType=INTEGER}, #{amount,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP})
    </insert>
    <insert id="insertSelective" parameterType="com.jxtc.bookapp.entity.Consume">
        insert into consume_#{tableIndex,jdbcType=INTEGER}
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="userId != null">
                user_id,
            </if>
            <if test="bookId != null">
                book_id,
            </if>
            <if test="chapterId != null">
                chapter_id,
            </if>
            <if test="amount != null">
                amount,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="userId != null">
                #{userId,jdbcType=VARCHAR},
            </if>
            <if test="bookId != null">
                #{bookId,jdbcType=INTEGER},
            </if>
            <if test="chapterId != null">
                #{chapterId,jdbcType=INTEGER},
            </if>
            <if test="amount != null">
                #{amount,jdbcType=INTEGER},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.jxtc.bookapp.entity.ConsumeExample" resultType="java.lang.Integer">
        select count(*) from consume_#{tableIndex,jdbcType=INTEGER}
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update consume_#{tableIndex,jdbcType=INTEGER}
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=INTEGER},
            </if>
            <if test="record.userId != null">
                user_id = #{record.userId,jdbcType=VARCHAR},
            </if>
            <if test="record.bookId != null">
                book_id = #{record.bookId,jdbcType=INTEGER},
            </if>
            <if test="record.chapterId != null">
                chapter_id = #{record.chapterId,jdbcType=INTEGER},
            </if>
            <if test="record.amount != null">
                amount = #{record.amount,jdbcType=INTEGER},
            </if>
            <if test="record.createTime != null">
                create_time = #{record.createTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update consume_#{tableIndex,jdbcType=INTEGER}
        set id = #{record.id,jdbcType=INTEGER},
        user_id = #{record.userId,jdbcType=VARCHAR},
        book_id = #{record.bookId,jdbcType=INTEGER},
        chapter_id = #{record.chapterId,jdbcType=INTEGER},
        amount = #{record.amount,jdbcType=INTEGER},
        create_time = #{record.createTime,jdbcType=TIMESTAMP}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.jxtc.bookapp.entity.Consume">
        update consume_#{tableIndex,jdbcType=INTEGER}
        <set>
            <if test="userId != null">
                user_id = #{userId,jdbcType=VARCHAR},
            </if>
            <if test="bookId != null">
                book_id = #{bookId,jdbcType=INTEGER},
            </if>
            <if test="chapterId != null">
                chapter_id = #{chapterId,jdbcType=INTEGER},
            </if>
            <if test="amount != null">
                amount = #{amount,jdbcType=INTEGER},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.jxtc.bookapp.entity.Consume">
        update consume_#{tableIndex,jdbcType=INTEGER}
        set user_id = #{userId,jdbcType=VARCHAR},
        book_id = #{bookId,jdbcType=INTEGER},
        chapter_id = #{chapterId,jdbcType=INTEGER},
        amount = #{amount,jdbcType=INTEGER},
        create_time = #{createTime,jdbcType=TIMESTAMP}
        where id = #{id,jdbcType=INTEGER}
    </update>

    <select id="selectListByUserId" resultMap="BaseResultMap">
        select *
        from consume_#{tableIndex,jdbcType=INTEGER}
        where user_id = #{userId,jdbcType=VARCHAR}
        order by create_time DESC
        limit #{offset,jdbcType=INTEGER},#{size,jdbcType=INTEGER}
    </select>

    <select id="selectBookConsumeList" resultType="com.jxtc.bookapp.entity.ConsumeCount">
        select s.book_id as bookId,
        b.book_name as bookName,
        count(s.id) as consumeCount,
        sum(s.amount) as consumeAmount,
        b.copyright_code as copyRight,
        b.category as category
        from consume_#{tableIndex,jdbcType=INTEGER} s,
        bc_source.book_info b
        where s.book_id = b.book_id
        <if test="startTime != null and startTime != '' and endTime !=null and endTime !=''">
            and s.create_time between concat('',#{startTime,jdbcType=VARCHAR},' 00:00:00')
            and concat('',#{endTime,jdbcType=VARCHAR},' 23:59:59')
        </if>
        <if test="bookName != null and bookName != ''">
            and b.book_name like concat('%',#{bookName,jdbcType=VARCHAR},'%')
        </if>
        group by s.book_id
        order by sum(s.amount) desc
        limit #{offset,jdbcType=INTEGER},#{size,jdbcType=INTEGER}
    </select>

    <select id="countBookConsumes" resultType="int">
        select count(distinct s.book_id)
        from consume_#{tableIndex,jdbcType=INTEGER} s,
        bc_source.book_info b
        where b.book_id=s.book_id
        <if test="bookName != null and bookName != ''">
            and b.book_name like concat('%',#{bookName,jdbcType=VARCHAR},'%')
        </if>
    </select>

    <select id="selectBookChapterConsumesList" resultType="com.jxtc.bookapp.entity.ConsumeCount">
        select s.book_id as bookId,
        s.chapter_id as chapterId,
        c.chapter_name as chapterName,
        count(s.id) as consumeCount,
        sum(s.amount) as consumeAmount
        from consume_#{tableIndex,jdbcType=INTEGER} s,
        bc_source.chapter_info c
        where c.book_id = s.book_id
        and s.book_id = #{bookId,jdbcType=INTEGER}
        and c.chapter_id = s.chapter_id
        group by s.chapter_id
        order by s.chapter_id asc
        limit #{offset,jdbcType=INTEGER},#{size,jdbcType=INTEGER}
    </select>

    <select id="countBookChapterConsumes" resultType="int">
        select count(distinct chapter_id)
        from consume_#{tableIndex,jdbcType=INTEGER}
        where book_id = #{bookId,jdbcType=INTEGER}
    </select>

    <select id="countByUserId" resultType="int">
        select count(*)
        from consume_#{tableIndex,jdbcType=INTEGER}
        where user_id = #{userId,jdbcType=VARCHAR}
    </select>

</mapper>